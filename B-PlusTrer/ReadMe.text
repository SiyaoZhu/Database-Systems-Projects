1. search(target):
If root is null, return null. Call findNode() recursively to find the leaf node possibly containing the target. If found return the value, else return null

2. findNode(stack:parent,target):
Test input node, if it is leaf return it, if not, compare the key and find the child possibly containing the target key, findNode(that child). Push processed nodes into a stack: parent, which is used to trace the path from root to the target leaf, which is useful to get parent node when delete record and result in underflowing. If root is leaf, stack should be empty

3. insert(key,value):
If root is null, create a leaf node containing the record by the constructor. follow the same step as search() by call findNode(root) to find target node to be updated. Insert the new record then see whether it is overflowed, if not exit this fucntion, else split the node and update the parent node by inserting a new key, test whether parent node is overflowed and recursively processed it until the parent node is not overflowed or the processing node is the root, in this case, overflowing results in creating a new root. After split a leaf node, the chaining between leaves is updated in split___Node().

4. findIndexInParent(Node:parent,key):
Find the index of key to be added to parent when child is overflowed, and the return value will be used to insert the key into parent by insertSorted().

5. splitLeafNode(LeafNodeleaf):
Split a leafnode. right node may contain the same amount or one more key than left node. More specifically, it creates a new leaf node and move extra keys from left node to this new right node. If the node to be split has a next leaf, connect that one to the new right leaf, or connect the left leaf to the right leaf. Return an entry containing the new node and the key to be inserted into parent node.

6. splitIndexNode(IndexNodeindex):
Same as the splitLeafNode(). The difference is no need to connect index nodes to its new born sibling.

7. delete(key):
Similar to insert(). If root is null, return null. Try to find the node possibly
containing the entry to be deleted. If this node doesnâ€™t contain the target ends this function, else delete that entry. See whether this leaf isUnderflowed(), if not, ends this function, else handle___Underflowed(). Call handle__Underflowed() to decide combine or redistribution. Use the return value to update their parent node. The parent node is popped from the stack: parent built in findNode(). the updated parent node will be checked to see whether it is overflowed. The while loop ends when the processing node is not underflowed or it is the root. The root may be pulled down if needed.

8. findNextIndexNode(IndexNodeindex,IndexNodeparent): findPreviousIndexNode(IndexNode index, IndexNode parent) findSiblingIndexNode(bool back, idxNode: index, idxNode: parent)
1st two methods are wrappers of the 3rd one. 3rd one find the sibling of index- th key in the parent node. Only 1st two functions are called specifying the back value to call 3rd function to decide the precious sibling or next sibling is returned.

9. handleLeafNodeUnderflow(Leftleaf,rightleaf,node:parent):
Look at the size of two nodes to decide to redistribute entries or combine them. the target node is selected first and try to redistribute, if it is not possible then combine them. Update the key of these two nodes in parent. Return -1 if redistribution. Return index of the node to be updated in parent if have combined two nodes and connect each other and other siblings if they have.

10.handleIndexNodeUnderflow(left idxnode, right idxnode, node:parent):
Similar to handleLeafNodeUnderflow(), the difference is when node has been splitted, instead of updating the key node in parent node just pull down it.
Bugs:
No bugs.
Others:
Completed BPLUSTree.java and added one toString() function to Node.java.
